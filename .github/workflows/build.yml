name: Build

on:
  release:
    types: [published]
  push:
    branches:
      - main
      - ci
  pull_request:
    branches:
      - "*"

env:
  PROJECT_NAME: rodi

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v1
        with:
          fetch-depth: 9
          submodules: false

      - name: Use Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v1
        id: depcache
        with:
          path: deps
          key: requirements-pip-${{ matrix.python-version }}-${{ hashFiles('requirements.txt') }}

      - name: Download dependencies
        if: steps.depcache.outputs.cache-hit != 'true'
        run: |
          pip download --dest=deps -r requirements.txt

      - name: Install dependencies
        run: |
          pip install -U --no-index --find-links=deps deps/*

      - name: Run tests
        run: |
          pytest --doctest-modules --junitxml=junit/pytest-results-${{ matrix.python-version }}.xml --cov=$PROJECT_NAME --cov-report=xml tests/

      - name: Run linters
        run: |
          echo "Running linters - if build fails here, please be patient!"

          flake8 $PROJECT_NAME
          flake8 tests
          isort --check-only $PROJECT_NAME 2>&1
          isort --check-only tests 2>&1
          black --check $PROJECT_NAME 2>&1
          black --check tests 2>&1

      - name: Upload pytest test results
        uses: actions/upload-artifact@master
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/pytest-results-${{ matrix.python-version }}.xml
        if: always()

      - name: Codecov
        run: |
          bash <(sed -i 's/filename=\"/filename=\"rodi\//g' coverage.xml)
          bash <(curl -s https://codecov.io/bash)

      - name: Install distribution dependencies
        run: pip install --upgrade twine setuptools wheel
        if: matrix.python-version == 3.9 || matrix.python-version == 3.10

      - name: Create distribution package
        run: python setup.py sdist bdist_wheel
        if: matrix.python-version == 3.9 || matrix.python-version == 3.10

      - name: Upload distribution package
        uses: actions/upload-artifact@master
        with:
          name: dist-package-${{ matrix.python-version }}
          path: dist
        if: matrix.python-version == 3.9 || matrix.python-version == 3.10

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Download a distribution artifact
        uses: actions/download-artifact@v2
        with:
          name: dist-package-3.10
          path: dist
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          skip_existing: true
          user: __token__
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.pypi_password }}
